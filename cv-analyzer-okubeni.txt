# CV Analyzer - System Documentation

## Overview
The CV Analyzer is a web application that allows users to upload their CVs and receive automated analysis and feedback to improve their job applications.

---

## System Architecture
The system consists of two main components:

**Frontend**: 
- Built with Next.js (React framework) and Tailwind CSS
- Provides the user interface and experience
- Handles file uploads, displays results, and manages language settings

**Backend**: 
- Python Flask server
- Processes and analyzes CV documents
- Returns structured analysis data to the frontend

---

## Information Flow

1. **User Interaction**
   - User visits the website
   - Selects preferred language (English or Turkish)
   - Uploads CV file through the interface

2. **Data Processing**
   - File is sent to the Next.js API route (/api/upload)
   - API forwards the file to the Python backend
   - Backend analyzes the CV content
   - Analysis results are returned to the frontend
   - Results are stored in browser localStorage
   - User is redirected to the results page
   - Results are displayed in user's chosen language

---

## Key Components

### 1. Language System
| File | Purpose |
|------|---------|
| `language-context.tsx` | Manages translations between English and Turkish |
| `language-selector.tsx` | UI component with EN/TR selection buttons |

- All text in the application comes from this centralized system
- Enables seamless switching between languages
- Prevents hardcoded text throughout the application

### 2. File Upload System
| File | Purpose |
|------|---------|
| `file-uploader.tsx` | Handles file selection and validation |

- Features:
  - Drag-and-drop interface
  - File validation (PDF, DOCX, or TXT)
  - Size limitations
  - Error handling
  - Progress bar visualization (simulated)
  - Analysis language selection
  - Data storage in localStorage

### 3. API System
| File | Purpose |
|------|---------|
| `api/upload/route.ts` | Bridges frontend and backend systems |

- Responsibilities:
  - Receives uploaded file from frontend
  - Forwards file to Python backend
  - Handles errors and timeouts
  - Provides fallback mechanism for backend failures
  - Returns structured data to frontend

### 4. Results Display System
| File | Purpose |
|------|---------|
| `results/page.tsx` | Presents analysis in user-friendly format |

- Features:
  - Reads analysis from localStorage
  - Formats data in clear, readable sections
  - Error handling for missing or malformed data
  - Shows:
    - Overall impression
    - ATS compatibility score
    - Strengths
    - Areas for improvement
    - Recommendations
    - Keyword suggestions

### 5. Layout & Navigation
| File | Purpose |
|------|---------|
| `layout.tsx` | Defines overall page structure |
| `nav-links.tsx` | Navigation menu with language switching |

- Provides consistent user experience across all pages
- Maintains language selection throughout navigation

---

## Functional vs. Visual Elements

### What's Actually Functional
✅ **Language switching** - Complete translation between English and Turkish  
✅ **File uploading** - File selection, validation, and processing  
✅ **Mock data generation** - Fallback system for backend failures  
✅ **LocalStorage handling** - Data persistence between page navigations  

### What's Mostly Visual/Placeholder
⚠️ **Progress bar** - Simulated, not reflecting actual upload progress  
⚠️ **ATS Score** - Randomly generated in mock data mode  
⚠️ **Analysis content** - Predetermined text when using mock data  
⚠️ **Backend connection** - May have connectivity issues  

---

## Fallback System

The application includes robust fallback mechanisms:

1. **Backend Failures**
   - Generates realistic mock analysis data
   - Uses language-appropriate content

2. **Data Storage Issues**
   - Default content if localStorage fails
   - Error messages explaining the problem

3. **Empty Data Fields**
   - Friendly messages instead of blank spaces
   - Appropriate visual indicators

---

## Technical Implementation Details

- **Frontend Framework**: Next.js (React)
- **Styling**: Tailwind CSS
- **State Management**: React Context
- **Data Storage**: Browser localStorage
- **API System**: Next.js App Router
- **Type Safety**: TypeScript

---

## Areas for Improvement

1. **Backend Connection**
   - Resolve issues with Python backend connectivity
   - Implement proper error handling between systems

2. **Analysis Engine**
   - Develop actual CV analysis functionality
   - Implement industry-specific keyword analysis

3. **Data Persistence**
   - Replace localStorage with proper database
   - Enable saving multiple CV analyses

4. **User Experience**
   - User accounts for saving history
   - Comparison between different CV versions
   - More detailed analysis explanations

---

*This document provides a high-level overview of the CV Analyzer system. For detailed implementation information, refer to the source code with comments.*